# Copyright (C) 2012 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

messages -> NetworkProcessProxy LegacyReceiver {
    DidCreateNetworkConnectionToWebProcess(IPC::Attachment connectionIdentifier)

    DidReceiveAuthenticationChallenge(uint64_t pageID, uint64_t frameID, WebCore::AuthenticationChallenge challenge, uint64_t challengeID)

    DidFetchWebsiteData(uint64_t callbackID, struct WebKit::WebsiteData websiteData)
    DidDeleteWebsiteData(uint64_t callbackID)
    DidDeleteWebsiteDataForOrigins(uint64_t callbackID)

    DidSyncAllCookies()

    ProcessReadyToSuspend()
    SetIsHoldingLockedFiles(bool isHoldingLockedFiles)

    # Diagnostic messages logging
    LogDiagnosticMessage(uint64_t pageID, String message, String description, enum:bool WebCore::ShouldSample shouldSample)
    LogDiagnosticMessageWithResult(uint64_t pageID, String message, String description, uint32_t result, enum:bool WebCore::ShouldSample shouldSample)
    LogDiagnosticMessageWithValue(uint64_t pageID, String message, String description, double value, unsigned significantFigures, enum:bool WebCore::ShouldSample shouldSample)

#if ENABLE(RESOURCE_LOAD_STATISTICS)
    DidLogUserInteraction(uint64_t callbackId)
    DidUpdateBlockCookies(uint64_t callbackId)
    DidSetAgeCapForClientSideCookies(uint64_t callbackId)
    StorageAccessRequestResult(bool wasGranted, uint64_t contextId)
    AllStorageAccessEntriesResult(Vector<String> domains, uint64_t contextId)
    DidRemoveAllStorageAccess(uint64_t contextId)
    DidSetCacheMaxAgeCapForPrevalentResources(uint64_t contextId)
    DidResetCacheMaxAgeCapForPrevalentResources(uint64_t contextId)
#endif
#if ENABLE(CONTENT_EXTENSIONS)
    ContentExtensionRules(WebKit::UserContentControllerIdentifier identifier)
#endif

    RetrieveCacheStorageParameters(PAL::SessionID sessionID)

#if ENABLE(SANDBOX_EXTENSIONS)
    GetSandboxExtensionsForBlobFiles(Vector<String> paths) -> (WebKit::SandboxExtension::HandleArray extensions) Async
#endif

#if ENABLE(SERVICE_WORKER)
    EstablishWorkerContextConnectionToNetworkProcess(struct WebCore::SecurityOriginData origin)
    EstablishWorkerContextConnectionToNetworkProcessForExplicitSession(struct WebCore::SecurityOriginData origin, PAL::SessionID explicitSession)
#endif
}
